#include<stdio.h>
#include<stdlib.h>

struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}
void inorder(struct Node* root) {
    if (root == NULL) {
        return;
    }
    inorder(root->left);     
    printf("%d ", root->data); 
    inorder(root->right);     
}
void preorder(struct Node* root)
   {
       if(root == NULL){
           return;
       }
       printf("%d " , root->data);
       preorder(root->left);
       preorder(root->right);
   }
 void postorder(struct Node* root)
   {
       if(root == NULL){
           return;
       }
       postorder(root->left);
       postorder(root->right);
       printf("%d " , root->data);
   }
int main() {
    
    struct Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);

    printf("Inorder Traversal of the Binary Tree:\n");
    inorder(root);
    printf("\n");
    printf("preorder Traversal of the Binary Tree:\n");
    preorder(root);
     printf("\n");
    printf("postorder Traversal of the Binary Tree:\n");
    postorder(root); 
	printf("\n");

    return 0;
}
