#include <stdio.h>
#include <stdlib.h>

#define MAX 5  // Define the maximum size of the queue

// Declare the queue and front, rear pointers
int queue[MAX];
int front = -1, rear = -1;

// Function to check if the queue is full
int isFull() {
    if (rear == MAX - 1) {
        return 1;  // Queue is full
    }
    return 0;
}

// Function to check if the queue is empty
int isEmpty() {
    if (front == -1 || front > rear) {
        return 1;  // Queue is empty
    }
    return 0;
}

// Function to add an element to the queue
void enqueue(int value) {
    if (isFull()) {
        printf("Queue is full. Cannot add %d to the queue.\n", value);
    } else {
        if (front == -1) {
            front = 0;  // If it's the first element
        }
        rear++;
        queue[rear] = value;
        printf("Enqueued %d\n", value);
    }
}

// Function to remove an element from the queue
int dequeue() {
    if (isEmpty()) {
        printf("Queue is empty. Cannot dequeue.\n");
        return -1;  // Return an invalid value
    } else {
        int value = queue[front];
        front++;
        if (front > rear) {
            front = rear = -1;  // Reset when the queue is empty
        }
        return value;
    }
}

// Function to display the queue elements
void display() {
    if (isEmpty()) {
        printf("Queue is empty. Nothing to display.\n");
    } else {
        printf("Queue elements: ");
        for (int i = front; i <= rear; i++) {
            printf("%d ", queue[i]);
        }
        printf("\n");
    }
}

// Main function to test the queue operations
int main() {
    enqueue(10);
    enqueue(20);
    enqueue(30);
    enqueue(40);
    enqueue(50);
    
    display();
    
    printf("Dequeued: %d\n", dequeue());
    printf("Dequeued: %d\n", dequeue());
    
    display();
    
    enqueue(60);
    display();
    
    return 0;
}
